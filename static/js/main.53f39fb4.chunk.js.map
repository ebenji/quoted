{"version":3,"sources":["Card.js","CardList.js","quotes.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","quote","className","alt","src","CardList","quotes","map","user","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAgBeA,G,UAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACA,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,SAASC,IAAG,yCAAoCL,EAApC,mBACjB,6BACI,4BAAKC,GACL,yBAAKE,UAAU,wBACf,2BAAID,QCaLI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCbtBK,EAAS,CACpB,CACEP,GAAI,EACJC,KAAM,iBACNC,MAAO,8OAET,CACEF,GAAI,EACJC,KAAM,gBACNC,MAAO,kEAET,CACEF,GAAI,EACJC,KAAM,gBACNC,MAAO,uDAET,CACEF,GAAI,EACJC,KAAM,iBACNC,MAAO,gIAET,CACEF,GAAI,EACJC,KAAM,YACNC,MAAO,0CAET,CACEF,GAAI,EACJC,KAAM,oBACNC,MAAO,+DCdIU,MATf,WACE,OACE,yBAAKT,UAAU,MACb,wBAAIA,UAAU,MAAd,4BACE,kBAAC,EAAD,CAAUI,OAASA,MCEPM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.53f39fb4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id ,name, quote}) => {\n    return(\n    <div className='tc grow bg-light-blue br3 pa3 ma3 dib bw3 shadow-5'>\n        <img alt='robots' src={`http://api.adorable.io/avatars/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <div className=\"tc f4 measure-narrow\">\n                <p>{quote}</p>\n                </div>\n            </div>\n    </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({quotes}) => {\n    return (\n        <div>\n          {\n            quotes.map((user, i) => {\n              return (\n                <Card\n                  key={i}\n                  id={quotes[i].id}\n                  name={quotes[i].name}\n                  quote={quotes[i].quote}\n                  />\n              );\n            })\n          }\n        </div>\n      );\n}\n\nexport default CardList;","export const quotes = [\n  {\n    id: 1,\n    name: 'Michael Jordan',\n    quote: '\"I have missed more than 9000 shots in my career. I have lost almost 300 games. 26 times, I have been trusted to take the game winning shot and missed. I have failed over and over and over again in my life. And that is why I succeed.\"'\n  },\n  {\n    id: 2,\n    name: 'Jocko Willink',\n    quote: '\"Extreme Ownership: there are no bad teams, only bad leaders.\"'\n  },\n  {\n    id: 3,\n    name: 'Wayne Gretzky',\n    quote: '\"You miss 100 percent of the shots you never take.\"'\n  },\n  {\n    id: 4,\n    name: 'Paul Kalanithi',\n    quote: '“You cannot ever reach perfection, but you can believe in an asymptote toward which you are ceaselessly striving.”'\n  },\n  {\n    id: 5,\n    name: 'Lil Wayne',\n    quote: '\"Real Gs move in silence like lasagna\"'\n  },\n  {\n    id: 6,\n    name: 'Benjamin Franklin',\n    quote: '“If you fail to plan, you are planning to fail.”'\n  }\n];\n","import React from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport {quotes} from \"./quotes\";\n\n\nfunction App() {\n  return (\n    <div className=\"tc\">\n      <h1 className='f1'>Ethan's Favourite Quotes</h1>\n        <CardList quotes= {quotes} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}